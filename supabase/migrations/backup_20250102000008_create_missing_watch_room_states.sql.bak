-- Create missing watch_room_states and video_states tables
-- Fix the table naming inconsistency in watch room system

BEGIN;

-- Create watch_room_states table (this was referenced in code but missing)
CREATE TABLE IF NOT EXISTS public.watch_room_states (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    room_id uuid NOT NULL REFERENCES public.watch_rooms(id) ON DELETE CASCADE,
    is_playing boolean DEFAULT false,
    playback_time numeric DEFAULT 0,
    last_updated_at timestamp with time zone DEFAULT now(),
    last_updated_by uuid REFERENCES auth.users(id),
    created_at timestamp with time zone DEFAULT now(),
    UNIQUE(room_id)
);

-- Create video_states table (also referenced in the code)
CREATE TABLE IF NOT EXISTS public.video_states (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    room_id uuid NOT NULL REFERENCES public.watch_rooms(id) ON DELETE CASCADE,
    is_playing boolean DEFAULT false,
    playback_time numeric DEFAULT 0,
    last_updated_at timestamp with time zone DEFAULT now(),
    last_updated_by uuid REFERENCES auth.users(id),
    created_at timestamp with time zone DEFAULT now(),
    UNIQUE(room_id)
);

-- Enable RLS
ALTER TABLE public.watch_room_states ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.video_states ENABLE ROW LEVEL SECURITY;

-- RLS Policies for watch_room_states
CREATE POLICY "Users can view watch_room_states for accessible rooms" ON public.watch_room_states
FOR SELECT USING (
    EXISTS (
        SELECT 1 FROM public.watch_rooms 
        WHERE id = watch_room_states.room_id 
        AND (created_by = auth.uid() OR is_private = false)
    )
);

CREATE POLICY "Room creators can update watch_room_states" ON public.watch_room_states
FOR ALL USING (
    EXISTS (
        SELECT 1 FROM public.watch_rooms 
        WHERE id = watch_room_states.room_id 
        AND created_by = auth.uid()
    )
);

-- RLS Policies for video_states
CREATE POLICY "Users can view video_states for accessible rooms" ON public.video_states
FOR SELECT USING (
    EXISTS (
        SELECT 1 FROM public.watch_rooms 
        WHERE id = video_states.room_id 
        AND (created_by = auth.uid() OR is_private = false)
    )
);

CREATE POLICY "Room creators can update video_states" ON public.video_states
FOR ALL USING (
    EXISTS (
        SELECT 1 FROM public.watch_rooms 
        WHERE id = video_states.room_id 
        AND created_by = auth.uid()
    )
);

-- Enable realtime for both tables
DO $$
BEGIN
    -- Add watch_room_states to realtime
    IF NOT EXISTS (
        SELECT 1 FROM pg_publication_tables 
        WHERE pubname = 'supabase_realtime' 
        AND tablename = 'watch_room_states'
    ) THEN
        ALTER PUBLICATION supabase_realtime ADD TABLE public.watch_room_states;
    END IF;
    
    -- Add video_states to realtime
    IF NOT EXISTS (
        SELECT 1 FROM pg_publication_tables 
        WHERE pubname = 'supabase_realtime' 
        AND tablename = 'video_states'
    ) THEN
        ALTER PUBLICATION supabase_realtime ADD TABLE public.video_states;
    END IF;
END $$;

-- Insert initial state for existing watch rooms
INSERT INTO public.watch_room_states (room_id, is_playing, playback_time)
SELECT id, false, 0 
FROM public.watch_rooms 
WHERE id NOT IN (SELECT room_id FROM public.watch_room_states)
ON CONFLICT (room_id) DO NOTHING;

INSERT INTO public.video_states (room_id, is_playing, playback_time)
SELECT id, false, 0 
FROM public.watch_rooms 
WHERE id NOT IN (SELECT room_id FROM public.video_states)
ON CONFLICT (room_id) DO NOTHING;

COMMIT; 